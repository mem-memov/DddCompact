DddCompact = function(applicationOptions) {    var application = this;    application.properties = {        namespaces: {},        domains: {},        eventBus: null,        id: 1    };        application.publicMembers = {};    application.init = function(applicationOptions) {        application.properties.namespaces = applicationOptions;        application.properties.eventBus = new application.EventBus({            makeItemMethod: application.makeItem        });        application.publicMembers = {            makeItem: application.makeItem        }                return application.publicMembers;    };    application.makeItem = function(domainName, itemClass, itemOptions) {            var domain = application.makeDomain(domainName);                var item = domain.makeItem(itemClass, itemOptions);            return item;    };        application.makeDomain = function(domainName) {            if (!application.properties.namespaces[domainName]) {            throw new Error("No namespace has been defined for " + domainName + " domain");        }        if (!application.properties.domains[domainName]) {            application.properties.domains[domainName] = new application.Domain({                domainName: domainName,                namespace: application.properties.namespaces[domainName],                eventBus: application.properties.eventBus,                provideIdMethod: application.provideId            });        }                return application.properties.domains[domainName];        };    application.provideId = function() {                return application.properties.id++;            }        application.Domain = function(domainOptions) {        var domain = this;        domain.properties = {            factory: null        };                domain.publicMembers = {};        domain.init = function(domainOptions) {            domain.properties.factory = new domain.Factory({                domainName: domainOptions.domainName,                namespace: domainOptions.namespace,                eventBus: domainOptions.eventBus,                provideIdMethod: domainOptions.provideIdMethod            });            domain.publicMembers =  {                makeItem: domain.makeItem            }                        return domain.publicMembers;                    };        domain.makeItem = function(className, itemOptions) {                    var compound = domain.properties.factory.makeItem(className, itemOptions);                        return compound.item;                    }                domain.Factory = function(factoryOptions) {            var factory = this;            factory.properties = {                domainName: null,                namespace: null,                eventBus: null,                cores: []            };            factory.publicMembers = {};                        factory.init = function(factoryOptions) {                                factory.properties.domainName = factoryOptions.domainName;                factory.properties.namespace = factoryOptions.namespace;                factory.properties.eventBus = factoryOptions.eventBus;                factory.provideIdMethod = factoryOptions.provideIdMethod;                                factory.publicMembers ={                    makeItem: factory.makeItem,                    makeCollection: factory.makeCollection                };                                return factory.publicMembers;                            };                        factory.provideIdMethod = function() {};                        factory.makeCore = function(itemClass) {                var core = new domain.Core({                    factory: factory,                    domainName: factory.properties.domainName,                    itemClass: itemClass,                    id: factory.provideIdMethod()                });                                factory.properties.cores.push(core);                                return core;                            };                        factory.makeItem = function(itemClass, itemOptions) {                if (typeof itemOptions == "undefined") {                    itemOptions = {};                }                            var core = factory.makeCore(itemClass);                var item = new factory.properties.namespace[itemClass](core);                                core.finishDefinition(item);                core.fillFields(itemOptions);                return {                    item: item,                    core: core                };                            };                        factory.findCore = function(item) {                for (var i in factory.properties.cores) {                                        if (factory.properties.cores[i].hasItem(item)) {                        return factory.properties.cores[i];                    }                                    }                                return null;                            };                        factory.makeCollection = function(itemClass) {                            var collection = new domain.Collection({                    eventBus: factory.properties.eventBus,                    itemFactoryMethod: function(record) {                        return factory.makeItem(itemClass, record);                    },                    findCoreMethod: function(item) {                        return factory.findCore(item);                    },                    fireEventMethod: function(eventName, eventData) {                                            if (!eventData) {                            var eventData = {};                        }                                                eventData.domainName = factory.properties.domainName;                        eventData.itemClass = itemClass;                                                return factory.properties.eventBus.fireEvent(eventName, eventData);                                            }                });                                return collection;                            };            return factory.init(factoryOptions);                    };        domain.Core = function(coreOptions) {            var core = this;            core.properties = {                id: null,                factory: null,                domainName: null,                itemClass: null,                host: null,                idFieldName: null,                fieldNames: [],                requiredFieldNames: [],                item: null            };            core.publicMembers = {};            core.init = function(coreOptions) {                core.properties.id = coreOptions.id;                core.properties.factory = coreOptions.factory;                core.properties.domainName = coreOptions.domainName;                core.properties.itemClass = coreOptions.itemClass;                core.publicMembers = {                    isIn: core.isIn,                    defineIdField: core.defineIdField,                    defineField: core.defineField,                    defineRequiredField: core.defineRequiredField,                    defineCollection: core.defineCollection,                    finishDefinition: core.finishDefinition                };                                return core.publicMembers;            };            core.isIn = function(host) {                core.properties.host = host;                            };                        core.defineIdField = function(idFieldName) {                core.defineField(idFieldName);                core.properties.idFieldName = idFieldName;            };            core.defineRequiredField = function(requiredFieldName) {                                core.defineField(requiredFieldName);                core.properties.requiredFieldNames.push(requiredFieldName);                            }                        core.defineField = function(fieldName) {                            if (core.properties.fieldNames[fieldName]) {                    throw new Error(                        "Field "                         + core.properties.domainName                        + "." + core.properties.itemClass                         + "." + fieldName                         + " cannot be redefined."                    );                }                                core.properties.fieldNames.push(fieldName);                                core.properties.host[fieldName] = null;                            };            core.defineCollection = function(collectionName, collectionClass) {                            var collection = core.properties.factory.makeCollection(collectionClass);                core.properties.host[collectionName] = collection;                            };                        core.finishDefinition = function(item) {                core.properties.item = item;                            delete(core.publicMembers.isIn);                delete(core.publicMembers.defineIdField);                delete(core.publicMembers.defineRequiredField);                delete(core.publicMembers.defineField);                delete(core.publicMembers.defineCollection);                                core.publicMembers.fillFields = core.fillFields;                core.publicMembers.hasItem = core.hasItem;                core.publicMembers.getRecord = core.getRecord;                core.publicMembers.getIdFieldName = core.getIdFieldName;                        };            core.fillFields = function(record) {                                for (var k in core.properties.requiredFieldNames) {                    if (typeof record[core.properties.requiredFieldNames[k]] == "undefined") {                        throw new Error(                            "No value for required field "                             + core.properties.domainName                            + "." + core.properties.itemClass                            + "." + core.properties.requiredFieldNames[k]                        );                    }                }                                for (var i in core.properties.fieldNames) {                    if (record[core.properties.fieldNames[i]]) {                        core.properties.host[core.properties.fieldNames[i]] = record[core.properties.fieldNames[i]];                    }                }                            }                        core.hasItem = function(item) {                return (item === core.properties.item);                            }                        core.getRecord = function() {                                var record = {};                                for (var i in core.properties.fieldNames) {                                        record[core.properties.fieldNames[i]] = core.properties.host[core.properties.fieldNames[i]];                                    }                                return record;                            }                        core.getIdFieldName = function() {                return core.properties.idFieldName;            }                        return core.init(coreOptions);        };        domain.Collection = function(collectionOptions) {            var collection = this;            collection.properties = {                eventBus: null            };                        collection.publicMembers = {};            collection.init = function(collectionOptions) {                collection.properties.eventBus = collectionOptions.eventBus;                collection.itemFactoryMethod = collectionOptions.itemFactoryMethod;                collection.fireEventMethod = collectionOptions.fireEventMethod;                collection.findCoreMethod = collectionOptions.findCoreMethod;                                collection.publicMembers = {                    createItem: collection.createItem,                    readAllItems: collection.readAllItems,                    readItemUsingId: collection.readItemUsingId,                    updateItem: collection.updateItem,                    deleteItem: collection.deleteItem                };                                return collection.publicMembers;            };                        collection.itemFactoryMethod = function() {};                        collection.findCoreMethod = function() {};                        collection.fireEventMethod = function() {};                        collection.createItem = function(requiredValues) {                                if (typeof requiredValues == "undefined") {                    var requiredValues = {};                }                                var compound = collection.itemFactoryMethod(requiredValues);                return compound.item;                            };            collection.readAllItems = function() {                var records = collection.fireEventMethod("readAllRecords", {}, []);                return collection.turnToItems(records);                            };                        collection.readItemUsingId = function(id) {                collection.checkRecordProvider('readRecordUsingId');                                var compound = collection.itemFactoryMethod();                                var address = compound.core.getAddress();                                var record = collection.properties.recordProvider.readRecordUsingId(                    address.domainName,                    address.itemClass,                    address.idFieldName,                    id                );                                compound.core.fillFields(record);                                return compound.item;            };            collection.updateItem = function(item) {                                var core = collection.findCoreMethod(item);                if (!core) {                    return;                }                                var idFieldName = core.getIdFieldName();                var record = core.getRecord();                                if (!record[idFieldName]) {                    collection.fireEventMethod("setRecordId", {                        idFieldName: idFieldName,                        record: record                    });                }                                collection.fireEventMethod("updateRecord", {                    idFieldName: idFieldName,                    record: record                });                            };            collection.deleteItem = function(item) {                var core = collection.findCoreMethod(item);                if (!core) {                    return;                }                                var idFieldName = core.getIdFieldName();                var record = core.getRecord();                                collection.fireEventMethod("deleteRecord", {                    idFieldName: idFieldName,                    idFieldValue: record[idFieldName]                });                                delete(item);                delete(core);            };                        collection.turnToItems = function(records) {                                var items = [];                                for (var i in records) {                    items.push(collection.turnToItem(records[i]));                }                                return items;                            };                        collection.turnToItem = function(record) {                var compound = collection.itemFactoryMethod(record);                                return compound.item;                            };                        return collection.init(collectionOptions);        };        return domain.init(domainOptions);    };    application.EventBus = function(eventBusOptions) {            var eventBus = this;        eventBus.properties = {            singletons: {},            makeItemMethod: function(){},            events: {                setRecordId: function(data) {                    var persistence = eventBus.makeSingleton("Persistence", "Persistence");                    return persistence.setRecordId(data.domainName, data.itemClass, data.idFieldName, data.record);                },                readAllRecords: function(data) {                    var persistence = eventBus.makeSingleton("Persistence", "Persistence");                    return persistence.readAllRecords(data.domainName, data.itemClass);                },                updateRecord: function(data) {                    var persistence = eventBus.makeSingleton("Persistence", "Persistence");                    return persistence.updateRecord(data.domainName, data.itemClass, data.idFieldName, data.record);                },                deleteRecord: function(data) {                    var persistence = eventBus.makeSingleton("Persistence", "Persistence");                    return persistence.deleteRecord(data.domainName, data.itemClass, data.idFieldName, data.idFieldValue);                }            }        };                eventBus.publicMembers = {};        eventBus.init = function(eventBusOptions) {                        eventBus.properties.makeItemMethod = eventBusOptions.makeItemMethod;                        eventBus.publicMembers = {                fireEvent: eventBus.fireEvent            };                        return eventBus.publicMembers;                    };                eventBus.fireEvent = function(eventName, eventData, defaultResult) {            if (eventBus.properties.events[eventName]) {                return eventBus.properties.events[eventName](eventData);            } else {                return defaultResult;            }                    };                eventBus.makeItem = function(domainName, itemClass) {                        return eventBus.properties.makeItemMethod(domainName, itemClass);                    }                eventBus.makeSingleton = function(domainName, itemClass) {                        if (!eventBus.properties.singletons[domainName]) {                eventBus.properties.singletons[domainName] = {};            }                        if (!eventBus.properties.singletons[domainName][itemClass]) {                eventBus.properties.singletons[domainName][itemClass] = eventBus.properties.makeItemMethod(domainName, itemClass);            }                        return eventBus.properties.singletons[domainName][itemClass];                    }                return eventBus.init(eventBusOptions);            }        return application.init(applicationOptions);}