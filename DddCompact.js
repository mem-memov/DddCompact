DddCompact = function(applicationOptions) {    var application = this;    application.properties = {        namespace: null    };        application.publicMembers = {};    application.init = function(applicationOptions) {        application.properties.namespace = applicationOptions.namespace;        application.publicMembers = {            makeDomain: application.makeDomain        }                return application.publicMembers;    };    application.makeDomain = function(domainName) {        return new application.Domain({            namespace: application.properties.namespace[domainName]        });    };    application.Domain = function(domainOptions) {        var domain = this;        domain.properties = {            factory: null        };                domain.publicMembers = {};        domain.init = function(domainOptions) {            domain.properties.factory = new domain.Factory({                namespace: domainOptions.namespace            });            domain.publicMembers =  {                makeItem: domain.makeItem            }                        return domain.publicMembers;                    };        domain.makeItem = function(className, itemOptions) {            return domain.properties.factory.makeItem(className, itemOptions);        }                domain.Factory = function(factoryOptions) {                        var factory = this;            factory.properties = {                namespace: null            };            factory.publicMembers = {};                        factory.init = function(factoryOptions) {                                factory.properties.namespace = factoryOptions.namespace;                                factory.publicMembers ={                    makeItem: factory.makeItem,                    makeCollection: factory.makeCollection                };                                return factory.publicMembers;                            };                        factory.makeCore = function() {                var core = new domain.Core({                    factory: factory                });                return core;            }                        factory.makeItem = function(className) {                var core = factory.makeCore();                var item = new factory.properties.namespace[className](core);                return item;            };                        factory.makeCollection = function(className) {                var collection = new domain.Collection({                    className: className,                    factory: factory                });                return collection;            };            return factory.init(factoryOptions);                    };        domain.Core = function(coreOptions) {            var core = this;            core.properties = {                factory: null            };            core.publicMembers = {};            core.init = function(coreOptions) {                core.properties.factory = coreOptions.factory;                core.publicMembers = {                    defineIdField: core.defineIdField,                    defineField: core.defineField,                    defineCollection: core.defineCollection                };                                return core.publicMembers;            };            core.defineIdField = function(idFieldName) {                core.publicMembers[idFieldName] = null;            };            core.defineField = function(fieldName) {                core.publicMembers[fieldName] = null;            };            core.defineCollection = function(collectionName, collectionClass) {                var collection = core.properties.factory.makeCollection(collectionClass);                core.publicMembers[collectionName] = collection;            };            return core.init(coreOptions);        };        domain.Collection = function(collectionOptions) {            var collection = this;            collection.properties = {                className: null,                factory: null            };                        collection.publicMembers = {};            collection.init = function(collectionOptions) {                collection.properties.className = collectionOptions.className;                collection.properties.factory = collectionOptions.factory;                collection.publicMembers = {                    createItem: collection.createItem,                    readItem: collection.readItem,                    updateItem: collection.updateItem,                    deleteItem: collection.deleteItem                };                                return collection.publicMembers;            };                        collection.createItem = function() {                return collection.makeItem();            };            collection.readItem = function() {                            };            collection.updateItem = function() {                            };            collection.deleteItem = function() {                            };                        collection.makeItem = function() {                                var item = new collection.properties.factory.makeItem(collection.properties.className);                return item;                            };            return collection.init(collectionOptions);        };        return domain.init(domainOptions);    };    return application.init(applicationOptions);}